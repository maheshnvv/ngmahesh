name: CI/CD Pipeline

# Add permissions for GitHub Pages deployment
permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  packages: write

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      force_libraries:
        description: 'Force build/publish specific libraries (comma-separated, e.g., ng-osm-map)'
        required: false
        default: ''
        type: string
      force_docs:
        description: 'Force build/deploy documentation'
        required: false
        default: false
        type: boolean
      version_bump:
        description: 'Version bump type for forced libraries'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: 'Skip tests during manual run'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  # Validate commit message format
  validate-commit-message:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate commit message format
        run: |
          # Get the commit message
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMIT_MSG="${{ github.event.pull_request.title }}"
          else
            COMMIT_MSG="${{ github.event.head_commit.message }}"
          fi

          echo "Validating commit message: $COMMIT_MSG"

          # Check if commit message contains required keywords in brackets
          VALID_KEYWORDS="(fix|feat|feature|upgrade|major|breaking|docs|style|refactor|perf|test|chore)"
          
          if ! echo "$COMMIT_MSG" | grep -qE "\\[$VALID_KEYWORDS\\]"; then
            echo "❌ Commit message validation failed!"
            echo ""
            echo "Your commit message must include at least one of these keywords in brackets:"
            echo "  [fix] - Bug fixes (patch version bump)"
            echo "  [feat] or [feature] - New features (minor version bump)"
            echo "  [upgrade] or [major] or [breaking] - Breaking changes (major version bump)"
            echo "  [docs] - Documentation changes"
            echo "  [style] - Code style changes"
            echo "  [refactor] - Code refactoring"
            echo "  [perf] - Performance improvements"
            echo "  [test] - Test changes"
            echo "  [chore] - Maintenance tasks"
            echo ""
            echo "Example: '[feat] Add new map component feature'"
            echo "Example: '[fix] Resolve marker positioning issue'"
            echo "Example: '[major] Breaking API changes for v2.0'"
            echo ""
            echo "Multiple keywords are allowed: '[feat][fix] Add feature and fix bug'"
            exit 1
          fi

          echo "✅ Commit message format is valid!"
  # Detect changes and build matrix
  detect-changes:
    needs: [validate-commit-message]
    if: always() && (needs.validate-commit-message.result == 'success' || needs.validate-commit-message.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      libraries: ${{ steps.changes.outputs.libraries }}
      docs-changed: ${{ steps.changes.outputs.docs }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          # Handle manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual workflow dispatch detected"

            # Parse force_libraries input
            FORCE_LIBS="${{ github.event.inputs.force_libraries }}"
            if [ -n "$FORCE_LIBS" ]; then
              # Convert comma-separated string to JSON array
              LIBRARIES=$(echo "$FORCE_LIBS" | tr ',' '\n' | jq -R -s -c 'split("\n") | map(select(length > 0)) | map(gsub("^\\s+|\\s+$"; ""))')
            else
              LIBRARIES="[]"
            fi

            # Force docs if requested
            DOCS_CHANGED="${{ github.event.inputs.force_docs }}"

            # Always allow deploy for manual triggers on master
            SHOULD_DEPLOY="true"

            echo "libraries=$LIBRARIES" >> $GITHUB_OUTPUT
            echo "docs=$DOCS_CHANGED" >> $GITHUB_OUTPUT
            echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

            echo "Manual trigger - Libraries: $LIBRARIES"
            echo "Manual trigger - Docs: $DOCS_CHANGED"
            echo "Manual trigger - Deploy: $SHOULD_DEPLOY"

            exit 0
          fi

          # Get changed files
          if [ "${{ github.event_name }}" = "push" ]; then
            if [ "${{ github.ref }}" = "refs/heads/master" ]; then
              # On master branch, compare with previous commit
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            else
              # On other branches, compare with master
              CHANGED_FILES=$(git diff --name-only origin/master...HEAD)
            fi
          else
            # For PRs, compare with target branch
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }})
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Detect which libraries changed
          LIBRARIES="[]"

          # Check ng-osm-map
          if echo "$CHANGED_FILES" | grep -q "^projects/ng-osm-map/"; then
            LIBRARIES=$(echo "$LIBRARIES" | jq -c '. + ["ng-osm-map"]')
          fi

          # Check if docs changed
          DOCS_CHANGED="false"
          if echo "$CHANGED_FILES" | grep -q -E "^(src/|docs/|README\.md|\.github/)"; then
            DOCS_CHANGED="true"
          fi

          # Should deploy (only on master or release branches)
          SHOULD_DEPLOY="false"
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            SHOULD_DEPLOY="true"
          fi

          echo "libraries=$LIBRARIES" >> $GITHUB_OUTPUT
          echo "docs=$DOCS_CHANGED" >> $GITHUB_OUTPUT
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

          echo "Detected libraries: $LIBRARIES"
          echo "Docs changed: $DOCS_CHANGED"
          echo "Should deploy: $SHOULD_DEPLOY"

  # Build and test libraries
  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.libraries != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        library: ${{ fromJson(needs.detect-changes.outputs.libraries) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean npm cache and dependencies (fix for npm optional dependencies bug)
        run: |
          rm -rf package-lock.json node_modules
          npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Build library
        run: npm run build ${{ matrix.library }}

      - name: Test library
        if: github.event.inputs.skip_tests != 'true'
        run: |
          # Add tests when available
          echo "Testing ${{ matrix.library }}"
          # npm run test ${{ matrix.library }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.library }}-build
          path: dist/${{ matrix.library }}
          retention-days: 7

  # Version bump and publish
  publish-libraries:
    needs: [detect-changes, build-and-test]
    if: needs.detect-changes.outputs.should-deploy == 'true' && needs.detect-changes.outputs.libraries != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      actions: write
    strategy:
      matrix:
        library: ${{ fromJson(needs.detect-changes.outputs.libraries) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Clean npm cache and dependencies (fix for npm optional dependencies bug)
        run: |
          rm -rf package-lock.json node_modules
          npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.library }}-build
          path: dist/${{ matrix.library }}

      - name: Get latest NPM version and determine version bump
        id: version
        run: |
          # Get latest version from NPM
          LIBRARY_NAME="@ngmahesh/${{ matrix.library }}"
          echo "Checking latest version for: $LIBRARY_NAME"
          
          # Try to get the latest version from NPM
          LATEST_VERSION=$(npm view "$LIBRARY_NAME" version 2>/dev/null || echo "0.0.0")
          echo "Latest NPM version: $LATEST_VERSION"
          
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./projects/${{ matrix.library }}/package.json').version")
          echo "Current package.json version: $CURRENT_VERSION"
          
          # Use the higher version as base
          if [ "$LATEST_VERSION" != "0.0.0" ]; then
            # Compare versions and use the higher one
            HIGHER_VERSION=$(printf '%s\n%s\n' "$LATEST_VERSION" "$CURRENT_VERSION" | sort -V | tail -n1)
            if [ "$HIGHER_VERSION" = "$LATEST_VERSION" ]; then
              echo "Using NPM version as base: $LATEST_VERSION"
              BASE_VERSION="$LATEST_VERSION"
            else
              echo "Using package.json version as base: $CURRENT_VERSION"
              BASE_VERSION="$CURRENT_VERSION"
            fi
          else
            echo "Package not found on NPM, using package.json version: $CURRENT_VERSION"
            BASE_VERSION="$CURRENT_VERSION"
          fi
          
          # Update package.json with base version
          cd projects/${{ matrix.library }}
          npm version "$BASE_VERSION" --no-git-tag-version
          cd ../..

          # Use manual input if available
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version_bump }}" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
            echo "Using manual version bump: $BUMP_TYPE"
          else
            # Determine version bump type based on commit messages with bracket keywords
            BUMP_TYPE="patch"

            # Get commit message
            COMMIT_MSG="${{ github.event.head_commit.message }}"
            echo "Analyzing commit message: $COMMIT_MSG"

            # Check for major version keywords in brackets
            if echo "$COMMIT_MSG" | grep -qE "\\[(upgrade|major|breaking)\\]"; then
              BUMP_TYPE="major"
              echo "Found major version keyword in brackets"
            # Check for minor version keywords in brackets
            elif echo "$COMMIT_MSG" | grep -qE "\\[(feat|feature)\\]"; then
              BUMP_TYPE="minor"
              echo "Found minor version keyword in brackets"
            # Check for patch version keywords in brackets
            elif echo "$COMMIT_MSG" | grep -qE "\\[(fix|perf)\\]"; then
              BUMP_TYPE="patch"
              echo "Found patch version keyword in brackets"
            # Default to patch for other keywords
            else
              BUMP_TYPE="patch"
              echo "Using default patch version for other keywords"
            fi

            # Override for release branches
            if [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
              if [[ "${{ github.ref }}" == *"major"* ]]; then
                BUMP_TYPE="major"
              elif [[ "${{ github.ref }}" == *"minor"* ]]; then
                BUMP_TYPE="minor"
              fi
            fi
          fi

          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "base-version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"
          echo "Base version: $BASE_VERSION"

      - name: Bump version
        id: bump
        run: |
          cd projects/${{ matrix.library }}

          # Get current version (should now be the base version from previous step)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current base version: $CURRENT_VERSION"

          # Bump version based on the determined type
          NEW_VERSION=$(npm version ${{ steps.version.outputs.bump-type }} --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}  # Remove 'v' prefix

          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION using ${{ steps.version.outputs.bump-type }} increment"

          # Update the root workspace package.json if needed
          cd ../..
          echo "✅ Version bump completed: ${{ matrix.library }} v$NEW_VERSION"

      - name: Build library with new version
        run: npm run build ${{ matrix.library }}

      - name: Publish to NPM
        run: |
          cd dist/${{ matrix.library }}
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag and push
        run: |
          TAG_NAME="${{ matrix.library }}-v${{ steps.bump.outputs.new-version }}"
          echo "Creating tag: $TAG_NAME"
          git tag -a "$TAG_NAME" -m "Release ${{ matrix.library }} v${{ steps.bump.outputs.new-version }}"

          # Configure git to use the token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ matrix.library }}-v${{ steps.bump.outputs.new-version }}
          release_name: ${{ matrix.library }} v${{ steps.bump.outputs.new-version }}
          body: |
            ## ${{ matrix.library }} v${{ steps.bump.outputs.new-version }}

            ### 🚀 Release Information
            - **Version Type**: ${{ steps.version.outputs.bump-type }} release
            - **Previous Version**: ${{ steps.version.outputs.base-version }}
            - **New Version**: ${{ steps.bump.outputs.new-version }}

            ### 📝 Changes
            **Commit Message**: ${{ github.event.head_commit.message }}

            ### 📦 Installation
            ```bash
            npm install @ngmahesh/${{ matrix.library }}@${{ steps.bump.outputs.new-version }}
            ```

            ### 📚 Documentation
            - [View Documentation](https://maheshnvv.github.io/ngmahesh/docs/${{ matrix.library }})
            - [Try Live Demo](https://maheshnvv.github.io/ngmahesh/demo/${{ matrix.library }})

            ### 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/@ngmahesh/${{ matrix.library }})
            - [GitHub Repository](https://github.com/${{ github.repository }})

            ---
            *This release was automatically generated by the CI/CD pipeline*
          draft: false
          prerelease: false

  # Build and deploy documentation
  deploy-docs:
    needs: [validate-commit-message, detect-changes]
    if: always() && (needs.validate-commit-message.result == 'success' || needs.validate-commit-message.result == 'skipped') && needs.detect-changes.outputs.docs-changed == 'true' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/release/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clean npm cache and dependencies (fix for npm optional dependencies bug)
        run: |
          rm -rf package-lock.json node_modules
          npm cache clean --force

      - name: Install dependencies
        run: npm install

      - name: Build main application (homepage)
        run: npm run build -- --base-href="/ngmahesh/"

      - name: Build library demos
        run: |
          # Build ng-osm-map demo if it exists
          if [ -d "projects/ng-osm-map" ]; then
            echo "Building ng-osm-map demo..."
            npm run build ng-osm-map
            # Create demo app build with correct base href
            mkdir -p dist/ng-osm-map-demo
            cp -r dist/ngmahesh/* dist/ng-osm-map-demo/ 2>/dev/null || true
          fi

      - name: Prepare GitHub Pages content
        run: |
          # Create the final dist structure for GitHub Pages
          mkdir -p gh-pages

          # Debug: Check what was built
          echo "Checking dist directory structure:"
          ls -la dist/

          # Angular build creates a browser folder inside the project name
          BUILD_DIR=""
          if [ -d "dist/ngmahesh/browser" ]; then
            BUILD_DIR="dist/ngmahesh/browser"
            echo "Found Angular 17+ build output in: $BUILD_DIR"
          elif [ -d "dist/ngmahesh" ]; then
            BUILD_DIR="dist/ngmahesh"
            echo "Found Angular build output in: $BUILD_DIR"
          else
            echo "Error: No build output found!"
            ls -la dist/
            exit 1
          fi

          # Copy the built Angular app to gh-pages root
          cp -r $BUILD_DIR/* gh-pages/

          # Add .nojekyll file to prevent Jekyll processing
          touch gh-pages/.nojekyll

          # Create 404.html for SPA routing
          cat > gh-pages/404.html << 'EOF'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <title>NgMahesh</title>
            <base href="/ngmahesh/">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <link rel="icon" type="image/x-icon" href="favicon.ico">
            <script>
              // Redirect 404s to index.html for SPA routing
              window.location.href = '/ngmahesh/';
            </script>
          </head>
          <body>
            <p>Redirecting...</p>
          </body>
          </html>
          EOF

          # Create library-specific folders and redirects
          mkdir -p gh-pages/ng-osm-map/demo
          mkdir -p gh-pages/ng-osm-map/docs

          # Create redirect for ng-osm-map
          cat > gh-pages/ng-osm-map/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>NgOsmMap - Redirecting...</title>
            <meta http-equiv="refresh" content="0; url=/ngmahesh/">
          </head>
          <body>
            <p>Redirecting to demo...</p>
          </body>
          </html>
          EOF

          # Copy demos if built
          if [ -d "dist/ng-osm-map-demo" ]; then
            if [ -d "dist/ng-osm-map-demo/browser" ]; then
              cp -r dist/ng-osm-map-demo/browser/* gh-pages/ng-osm-map/demo/
            else
              cp -r dist/ng-osm-map-demo/* gh-pages/ng-osm-map/demo/
            fi
          fi

          # Copy documentation
          if [ -d "docs" ]; then
            cp -r docs/* gh-pages/ng-osm-map/docs/
          fi

          echo "Final GitHub Pages structure:"
          ls -la gh-pages/
          echo "Files in root:"
          ls -la gh-pages/ | head -10

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          enable_jekyll: false
          allow_empty_commit: false
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  # Notification job
  notify:
    needs: [validate-commit-message, detect-changes, build-and-test, publish-libraries, deploy-docs]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Notify on success
        if: (needs.publish-libraries.result == 'success' || needs.deploy-docs.result == 'success') && (needs.validate-commit-message.result == 'success' || needs.validate-commit-message.result == 'skipped')
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Libraries published: ${{ needs.detect-changes.outputs.libraries }}"
          echo "Docs deployed: ${{ needs.detect-changes.outputs.docs-changed }}"

      - name: Notify on validation failure
        if: needs.validate-commit-message.result == 'failure'
        run: |
          echo "❌ Commit message validation failed!"
          echo "Please ensure your commit message includes proper keywords in brackets."
          exit 1

      - name: Notify on pipeline failure
        if: needs.build-and-test.result == 'failure' || needs.publish-libraries.result == 'failure' || needs.deploy-docs.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Check the logs for more details."
          exit 1
